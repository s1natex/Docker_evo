name: main-ci

on:
  push:
    branches:
      - "**"
    paths:
      - "app/**"
      - "scripts/**"
      - "docker-compose.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  packages: read

concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-central-1
  PROJECT: docker-evo
  ECR_FRONTEND_REPO: docker-evo-frontend
  ECR_PASSGEN_REPO: docker-evo-pass-gen

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/pass-gen/requirements.txt
          pip install pytest

      - name: Run unit tests
        run: python ./scripts/run_unit.py

      - name: Start compose stack
        run: |
          docker compose up -d
          sleep 5

      - name: Run E2E tests
        run: python ./scripts/run_e2e.py

      - name: Stop compose stack
        if: always()
        run: docker compose down -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo "ACCOUNT_ID=${ACCOUNT_ID}" >> $GITHUB_ENV
          aws ecr get-login-password --region "${AWS_REGION}" | \
            docker login --username AWS --password-stdin "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Compute image tag
        id: tag
        run: |
          NAME="${{ env.PROJECT }}"
          TS="$(date -u +'%Y%m%d-%H%M%S')"
          SHA="${GITHUB_SHA::7}"
          TAG="${NAME}-${TS}-${SHA}"
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Build images
        run: |
          REG="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker build -t "${REG}/${ECR_FRONTEND_REPO}:${TAG}" ./app/frontend
          docker build -t "${REG}/${ECR_PASSGEN_REPO}:${TAG}" ./app/pass-gen

      - name: Push images
        run: |
          REG="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker push "${REG}/${ECR_FRONTEND_REPO}:${TAG}"
          docker push "${REG}/${ECR_PASSGEN_REPO}:${TAG}"

      - name: Update terraform image tag
        run: |
          mkdir -p terraform/ecs
          echo "image_tag = \"${TAG}\"" > terraform/ecs/image.auto.tfvars

      - name: Commit and push [skip ci]
        env:
          GH_EMAIL: ci-bot@users.noreply.github.com
          GH_NAME: ci-bot
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          git config user.email "${GH_EMAIL}"
          git config user.name "${GH_NAME}"
          git add terraform/ecs/image.auto.tfvars
          if ! git diff --cached --quiet; then
            git commit -m "chore(ci): bump image_tag to ${TAG} [skip ci]"
            git push origin "HEAD:${BRANCH}"
          fi
          echo "No changes to commit."
